

// CoAP server endpoint URL
void callback_get_io(CoapPacket &packet, IPAddress ip, int port)
{
    if (!RpiIP.isSet())
        return;

    Serial.println("Get IO");
    lastConnectedToRPi = 0;

    CoapOption option;
    for (int i = 0; i < COAP_MAX_OPTION_NUM; i++)
    {
        option = packet.options[i];
        if (!option.length)
            continue;
        if (option.number == COAP_URI_QUERY)
        {
            break;
        }
    }
    if (option.number != COAP_URI_QUERY && !option.length)
    {
        return;
        //TODO :coap.sendResponse ??
    }
    char queryOpt[option.length];
    memcpy(queryOpt, option.buffer, option.length);
    queryOpt[option.length] = NULL;

    String input = String(queryOpt).substring(inputPrefixLen);
    bool digital = input.substring(0, 1).equals("D"); // If first char is D => digital pin.
    bool analog = input.substring(0, 1).equals("A");  // If first char is D => digital pin.
    bool i2c = input.substring(0, 3).equals("I2C");   // If first char is D => digital pin.
    int pinNumber;

    String responseStr = "";
    if (digital)
    {
        pinNumber = input.substring(1).toInt(); //Here we use pin number directly (without constants like A0, D5 etc...)
    }
    else if (analog)
    {
        pinNumber = input.substring(1).toInt(); //Here we use pin number directly (without constants like A0, D5 etc...)
        responseStr = String("ESP-get-val:" + String(analogRead(pinNumber)) /*+ String(analogRead(pinNumber))*/);
    }
    else if (i2c)
    {
        float sensorVal;
        if (!bmpHasBegun)
        {
            if (!bmp.begin(BMP280_ADRESS))
            {
                //Serial.println("BMP280 senzor nenalezen");
            }
            else
            {
                bmpHasBegun = true;
            }
        }
        if (input.substring(4, 10).equals("BMP280"))
        {                                                                                                         //eg. "I2C-BMP280-teplota"
            String type = (input.length() >= 18 && input.substring(11, 18).equals("teplota")) ? "temp" : "press"; //temp or press (temperature/pressure)
            if (type.equals("temp"))
            {
                sensorVal = bmp.readTemperature();
            }
            else if (type.equals("press"))
            {
                sensorVal = bmp.readPressure();
            }
        }
        else if (input.substring(4, 9).equals("SHT21"))
        {                                                                                                       //eg. "I2C-SHT21-teplota"
            String type = (input.length() >= 18 && input.substring(10, 17).equals("teplota")) ? "temp" : "hum"; //temp or hum (temperature/humidity)
            if (type.equals("temp"))
            {
                sensorVal = SHT2x.GetTemperature();
            }
            else if (type.equals("hum"))
            {
                sensorVal = SHT2x.GetHumidity();
            }
        }
        responseStr = String("ESP-get-val:" + String(sensorVal) /*+ String(analogRead(pinNumber))*/);
    }
    //Serial.println("pin:" + String(pinNumber));
    //Serial.println("read:" + String(analogRead(pinNumber)));
    /*
    Serial.println("len:" + String(sizeof(responseStr)));
    Serial.println("len2:" + String(responseStr.length()));*/
    char response[responseStr.length()];
    strncpy(response, responseStr.c_str(), sizeof(response));
    //response[responseStr.length()] = 0;
    //Serial.println("responseStr to return:" + responseStr);
    coap.sendResponse(ip, port, packet.messageid, response, sizeof(response), COAP_CHANGED, COAP_TEXT_PLAIN, (packet.token), packet.tokenlen);
}

